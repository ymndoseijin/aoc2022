const std = @import("std");
const builtin = @import("builtin");

var gpa = std.heap.GeneralPurposeAllocator(.{}){};
pub const allocator = if (builtin.mode == .Debug) gpa.allocator() else std.heap.c_allocator;

pub fn main() !void {
    var arg_iterator = switch (builtin.os.tag) {
        .windows => try std.process.ArgIterator.initWithAllocator(allocator),
        else => std.process.args(),
    };

    var first = true;

    while (arg_iterator.next()) |path| {
        if (first) {
            first = false;
            continue;
        }

        var file = try std.fs.cwd().openFile(path, .{});
        defer file.close();

        var buf_reader = std.io.bufferedReader(file.reader());
        var in_stream = buf_reader.reader();

        var buf: [2048]u8 = undefined;

        var get_first = true;
        var width: usize = 0;

        var rows = std.ArrayList([]const u8).init(allocator);

        while (try in_stream.readUntilDelimiterOrEof(&buf, '\n')) |line| {
            if (get_first) {
                width = line.len;
            }

            try rows.append(try allocator.dupe(u8, line));
        }

        var height = rows.items.len;

        var count: usize = 0;

        var highest_score: usize = 0;

        var y: usize = 0;
        for (rows.items) |row| {
            var x: usize = 0;
            var score: usize = 1;
            for (row) |tree| {
                var search_count = true;
                defer x += 1;
                std.log.info("new: {c} {}", .{ tree, height - y });

                var visible = true;
                // right
                var i: usize = x + 1;
                var loop_score: usize = 0;
                while (i < width) : (i += 1) {
                    if (row[i] >= tree) {
                        loop_score = 1;
                        visible = false;
                    }
                    loop_score += 1;
                }
                if (loop_score != 0) {
                    score *= loop_score;
                }
                loop_score = 0;

                if (search_count) {
                    if (visible) {
                        count += 1;
                        search_count = false;
                    } else {
                        visible = true;
                    }
                }

                // left
                i = 0;
                while (i < x) : (i += 1) {
                    if (row[i] >= tree) {
                        loop_score = 1;
                        visible = false;
                    }
                    loop_score += 1;
                }
                if (loop_score != 0) {
                    score *= loop_score;
                }
                loop_score = 0;

                if (search_count) {
                    if (visible) {
                        count += 1;
                        search_count = false;
                    } else {
                        visible = true;
                    }
                }

                // up
                i = y + 1;
                while (i < height) : (i += 1) {
                    if (rows.items[i][x] >= tree) {
                        loop_score = 1;
                        visible = false;
                    }
                    loop_score += 1;
                }
                if (loop_score != 0) {
                    score *= loop_score;
                }
                loop_score = 0;
                if (search_count) {
                    if (visible) {
                        count += 1;
                        search_count = false;
                    } else {
                        visible = true;
                    }
                }
                i = 0;
                // down
                while (i < y) : (i += 1) {
                    if (rows.items[i][x] >= tree) {
                        loop_score = 1;
                        visible = false;
                    }
                    loop_score += 1;
                }
                if (loop_score != 0) {
                    score *= loop_score;
                }
                loop_score = 0;
                if (search_count) {
                    if (visible) {
                        count += 1;
                        search_count = false;
                    } else {
                        visible = true;
                    }
                }
            }
            std.log.info("{}", .{score});
            if (score > highest_score)
                highest_score = score;
            y += 1;
        }
        std.log.info("total {} {}", .{ count, highest_score });
    }
}
